#labels Phase-QA
= Introdução =

O jogo da velha, homenageado aqui com o nome de Jogo da Idosa ou  ainda "Figth for Old", é um jogo de regras muito simples.

Historicamente, de acordo com estudos e pesquisadores, o seu nome tem se originado na Inglaterra, que nos finais de tarde as mulheres se reuniam para bordar e colocar o papo em dia, enquanto as mulheres idosas por não mais terem condições de bordar devido à fraqueza na vista e nos movimentos, jogavam este simples jogo. É por este motivo que o jogo recebe o nome de jogo da ‘velha’, apesar de que há quem diga que sua origem tenha sido ainda mais antiga, pois fala-se que em tabuleiros escavados na rocha de tempos antigos do Egito, os quais teriam sido feitos por escravos há 3.500 anos. Logo, poderíamos chamá-lo como o velho jogo da velha! :)

= Regras = 
O tabuleiro possui uma matriz de três linhas por três colunas;

-Dois jogadores escolhem uma marcação, ou seja, um escolhe o círculo (O) e o outro o xis (X);

-Se inicia o jogo através de par ou ímpar (no nosso caso sempre começa-se com o X), e segue a sequência alternada, ou seja, uma marcação por vez, em uma lacuna que esteja vazia.

-O principal objetivo do jogo é fazer com que três xis ou três círculos fiquem em linha horizontal, diagonal ou vertical, simultaneamente, quando possível impedir que o adversário ganhe na próxima jogada.

-Quando um jogador consegue conquistar o objetivo, tem-se o costume de riscar os três símbolos.



= Implementação =

A implementação foi elaborada seguindo os seguintes passos:
|| Passos ||
|| 1) || Inicialização as diversas constantes (Endereçamento para o BitmapDisplay, Mensagens de texto, cores)||
|| 2) || Inicialização das variáveis (todas armazenadas em registradores)||
|| 3) ||Desenha o tabuleiro no BitmapDisplay||
|| 4) ||Imprime o menu de opções||
|| 5) ||Recebe uma tecla||
|| 6) ||Avaliando a paridade do contador de jogadas determina se é a vez do X(ímpar) ou O (par)||
|| 7) ||Verifica se posição teclada já ocupada se sim (volta ao passo 4) ||
|| 8) ||Se posição desocupada desenha o X, ou o O na posição escolhida||
|| 9) ||Incrementa o contador||
|| 10) ||Se o contador for maior que 4, verifica se alguém ganhou (passo 12)||
|| 11) ||Se contador for maior que 9 (empate) termina o jogo.||
|| 12) ||Se ninguem ganhou volta ao passo 4||
|| 13) ||Se alguem ganhou, anuncia o ganhador e termina o jogo.||


= Tabuleiro =


<img src="https://bsimips.googlecode.com/svn/trunk/IdosaGame/Imagens/tabuleiro.PNG">


= Considerações para simulação do código =

O código abaixo fornecido foi desenvolvido para o microprocessador MIPS por meio do simulador MARS. Para simulá-lo será necessário abrir o BitmapDisplay, configurá-lo em 64x64, e conectá-lo ao MARS.


<img src="https://bsimips.googlecode.com/svn/trunk/IdosaGame/Imagens/FinalJogo.PNG">



= O código =

{{{
#######################################################################################
#
# NOME DO PROGRAMA: JOGO DA IDOSA
# AUTORES: ALINE FIGUEIREDO, CRISTIANO SANTANA, JESILENE GODOY E LUIS MIRANDA
#
# UM TIPICO JOGO DA VELHA, DESENVOLVIDO EM MARS PARA MIPS
#
# UNIVERSIDADE FEDERAL DE SÃO CARLOS
# ARQUITETURA DE COMPUTADORES
#
# AGRADECIMENTOS: Ao prezado Jerrekedb, um Belga que ao divulgar seu confuso código 
# permitiu que nós aprendêssemos a usar o BitMapDisplay.
# http://www.cppgameprogramming.com/newforums/viewtopic.php?f=7&t=1920
#
# -----------------------------------------------------
#  jogo da Idosa! ------------->UFSCar BSI.g5 - AC ----
#  ----------------------------------------------------
#  ------------------------------- aline figueiredo ---
#     |     |      ---------------- cristiano santana -
#  1  |  2  | 3     ---------------- jesilene godoy ---
# ----|-----|----     ---------------- luis miranda ---
#  4  |  5  | 6         -------------------------------
# ----|-----|----       -------------------------------
#  7  |  8  | 9         ------ (0) ZERO SAI DO JOGO ---
#     |     |           -------------------------------
# ESCOLHA UMA POSICAO: 
#
# 18/4/13
# Acertos de formatação e correções ortográficas
# o que faltava, foi implementada na versão anterior mesmo.
#
# 11/4/13 23:55 
# Nesta versao foi acrescentado:
#  - a checagem para ver se foi escolhida a mesma posicao duas vezes (e armazenado 
#    de $t1 a $t9 as escolhas de X(1) e O(0))
#  - os locais que usava as variaveis $t2 mudei para $a1 que nao estava sendo usada
#  - os locais que usava as variaveis $t7 mudei para $a3 que nao era usada
#  - incrementei na funcao do Luis (verposicao) a possibilidade de retornar em $v1 
#    se a posicao de $t1 a $t9 estava desocupada para atribuir o valor entrado pelo 
#    teclado.
#  - se em algum momento algum jogador tecla 0 (zero) o jogo acaba.
#  
#######################################################################################

.data
#inicialização do bitmap
bitmap_address:   .space 0x8000

#posicao no bitmap
pos_1:	.word 0
pos_2:	.word 84
pos_3:	.word 168
pos_4:	.word 5376
pos_5:	.word 5460
pos_6:	.word 5544
pos_7:	.word 10752
pos_8:	.word 10836
pos_9:	.word 10920

# menu para jogar
msg0:    .asciiz " -----------------------------------------------------\n"
msg1:    .asciiz "  jogo da Idosa! ------------->UFSCar BSI.g5 - AC ----\n"
msg2:    .asciiz "  ----------------------------------------------------\n"
msg3:    .asciiz "  ------------------------------- aline figueiredo ---\n"
msg4:    .asciiz "     |     |      ---------------- cristiano santana -\n"
msg5:    .asciiz "  1  |  2  | 3     ---------------- jesilene godoy ---\n"
msg6:    .asciiz " ----|-----|----     ---------------- luis miranda ---\n"
msg7:    .asciiz "  4  |  5  | 6         -------------------------------\n"
msg8:    .asciiz " ----|-----|----       -------------------------------\n"
msg9:    .asciiz "  7  |  8  | 9         ------ (0) ZERO SAI DO JOGO ---\n"
msgA:    .asciiz "     |     |           -------------------------------\n"
msgB:    .asciiz " ESCOLHA UMA POSICAO: \n"

msgFIM_X:  .asciiz " FIM DO JOGO - X VENCEU \n"
msgFIM_O:  .asciiz " FIM DO JOGO - 0 VENCEU \n"
msgFIM:    .asciiz " FIM DO JOGO - NINGUEM VENCEU \n"

# cores
black:   .word 0x0
white:   .word 0xffffff
red:     .word 0xff8888
green:   .word 0x00ff00
blue:    .word 0x8888ff

.text
# Definicoes:
# pontuacao do jogador X $k1
# pontuacao do jogador O $k0
#
# vez do jogador X BIT MENOS SIGNFICATIVO DE $t0 = 1  -NUMEROS IMPARES
# vez do jogador O BIT MENOS SIGNFICATIVO DE $t0 = 0  -NUMEROS PARES
#
#     |     |     
#  1  |  2  | 3   
# ----|-----|---- 
#  4  |  5  | 6   
# ----|-----|---- 
#  7  |  8  | 9   
#     |     |     

# posicao 1 $t1
# posicao 2 $t2 
# posicao 3 $t3
# posicao 4 $t4
# posicao 5 $t5
# posicao 6 $t6
# posicao 7 $t7
# posicao 8 $t8
# posicao 9 $t9

######################################################################
#INÍCIO DO PROGRAMA!
	#Zera a pontuacao do jogador X
	li $k1, 0
	#Zera a pontuaçao do jogador O
	li $k0, 0
	#inicia o jogo com o X
	li $a3, 1 
	
	li $t1, 2 #INICIALIZA AS POSICOES COM VALOR 2 (NEM X, NEM O)
	li $t2, 2
	li $t3, 2
	li $t4, 2
	li $t5, 2
	li $t6, 2
	li $t7, 2
	li $t8, 2
	li $t9, 2
	
	
main:
	j tabuleiro #DESENHA O TABULEIRO
	
volta_ao_principal:
	j menu

volta_menu:
tecla19:	
	li $v0,5  # tecla de 1 até 9
	syscall   # Entrada de teclado posicao 1 a 9

	#Verifica se é a vez do X ou do O. 
	#(se contador $a3 for impar vez do X, se for par vez do 0)
	andi $s1, $a3, 1
	j verPosicao # verifica se a posicao escolhida esta disponivel e zero em $v1 
	             # se posicao estava disponivel
		     # quando posicao disponivel, ocupa a posicao com 1 se X e 0 se O 
		     # de $t1 a $t9
		     
volta_verPosicao: #para apos a rotina verPosicao retornar no ponto certo

	bnez $v1, volta_ao_principal # se foi escolhido uma posicao ja ocupada em 
	                             # outra jogada nao desenha nada
			
	# ver quem e o jogador extrair  LSB 0 ou 1
	# andi $s1, $a3, 1  

	#  se 0 fazO  se 1 fazX
	beq  $s1,$zero,fazo
		
fazx:	jal faz_x
	bne $s1,$zero,fimfaz    
	
fazo:	jal faz_o	

# incrementa contador - proxima jogada
fimfaz:	addi $a3,$a3,1

	bgt $a3, 4, alguem_ganhou    # verifica se alguem ganhou

volta_alguem_ganhou:
	bgt $a3, 9, fim_do_jogo #ultrapassou 9 jogadas	
	j volta_ao_principal    #tecla19 

# anuncia_vencedor
anuncia_vencedor:
	subi $a3, $a3, 1 #decrementa ultimo incremento	
	andi $s1, $a3, 1 #indentifica ganhador
	beqz $s1, O_vence

#X_vence:
	li  $v0, 4
	la $a0, msgFIM_X
	syscall 
	j the_end   

O_vence:
	li  $v0, 4
	la $a0, msgFIM_O
	syscall 
	j the_end   

the_end:
	li $v0,10
	syscall

###########################################################
#  SUBROTINA faz_x
#  FUNCAO: desenha o X na posicao determinada por $a1
#  UTILIZA: $s2 $s3, $a2
###########################################################


###########################################################
#  SUBROTINA faz_o
#  FUNCAO: desenha o O na posicao determinada por $a1
#  UTILIZA: $s2 $s3, $s4, $s5, $a2
###########################################################

###########################################################
#  SUBROTINA tabuleiro
#  FUNCAO: desenha o tabuleiro no BitMapDisplay
#  UTILIZA: $s2, $s3 e $a2
###########################################################
tabuleiro:	
# monta jogo da velha
# como foi elaborado quando estávamos aprendendo a desenhar no BitmapDisplay 
# foi feito linha por linha sem a criacao de subrotinas

	j volta_ao_principal

###########################################################
#  SUBROTINA menu
#  FUNCAO: so desenha o menu de escolha de posicao
#  UTILIZA: $v0, $a0
###########################################################
menu:
	li  $v0, 4
	la $a0, msg0
	syscall
	la $a0, msg1
	syscall
	la $a0, msg2
	syscall
	la $a0, msg3
	syscall
	la $a0, msg4
	syscall
	la $a0, msg5
	syscall	
	la $a0, msg6
	syscall
	la $a0, msg7
	syscall
	la $a0, msg8
	syscall
	la $a0, msg9
	syscall
	la $a0, msgA
	syscall
	la $a0, msgB
	syscall	
	
	j volta_menu

###########################################################
#  SUBROTINA verPosicao
#  Funcao: marca qual a posicao desenho
#  UTILIZA: 0, $v0, $s2, $t0, $s1 (recebe se e a jogada do X ou do O), usa de 
#           $t1 a $t9 (armazeando 0 se a posicao estiver com O e 1 se tiver com X), 
#  RETORNA: $s2 com o endereco do bitmap onde deve ser desenhado se $v1 igual a zero
#           deve ser desenhado o X ou o 0, senao quer dizer que a posicao ja esta 
#           ocupada.
###########################################################
	
####################### Termina JOGO ###############################	
fim_do_jogo:	
	li  $v0, 4
	la $a0, msgFIM
	syscall
	
	li $v0, 10 # termina programa se teclar 0
	syscall  
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
###################################################################
		
						
# marcar posicao na Matriz para soma dos pontos
fimPos:	J volta_verPosicao

##################################################################
# Funcao alguem_ganhou
#
##################################################################
alguem_ganhou:
	bne  $t1, 2, casa_um_preenchida
a_g_1:
	bne  $t5, 2, casa_cinco_preenchida
a_g_2:	
	bne  $t9, 2, casa_nove_preenchida
	j alguem_ganhou_fim
	
casa_um_preenchida:
	bne $t1, $t2, cp1a
	bne $t1, $t3, cp1a
	jal traca_123
	j anuncia_vencedor
cp1a:	
	bne $t1, $t4, cp1b
	bne $t1, $t7, cp1b	
	jal traca_147
	j anuncia_vencedor
cp1b:	
	bne $t1, $t5, a_g_1
	bne $t1, $t9, a_g_1	
	jal traca_159
	j anuncia_vencedor

casa_cinco_preenchida:
	bne $t5, $t7, cp5a
	bne $t5, $t3, cp5a
	jal traca_753
	j anuncia_vencedor
cp5a:
	bne $t5, $t4, cp5b
	bne $t5, $t6, cp5b
	jal traca_456
	j anuncia_vencedor
cp5b:
	bne $t5, $t2, a_g_2
	bne $t5, $t8, a_g_2
	jal traca_258
	j anuncia_vencedor
	
casa_nove_preenchida:	
	bne $t9, $t3, cp9a
	bne $t9, $t6, cp9a
	jal traca_369
	j anuncia_vencedor
cp9a:
	bne $t9, $t7, alguem_ganhou_fim #
	bne $t9, $t8, alguem_ganhou_fim #
	jal traca_789
	j anuncia_vencedor

alguem_ganhou_fim:   # fim da rotina alguem ganhou 
                     # (passar por aqui significa que ninguem ganhou)
	j volta_alguem_ganhou
	
##################################################################
# Funcao traca_123
#
##################################################################
traca_123:
	# chame esta funcao com o comando abaixo que voltara sozinho
	#jal traca_123
	li $s2, 0x0B00# 16384 posicao da primeira linha
	li $s3, 64 #16384    largura da primeira linha horizontal
	lw $a2,green #cor da linha
pulo123_a:
	sw $a2, bitmap_address($s2)
	subi $s2, $s2, 4 #muda para a proxima posicao do bitmap
	subi $s3, $s3, 1 #derementa contador de largura
	beq $s3, $zero, fim123_a #verifica fim
	j pulo123_a
fim123_a:	
	jr $ra
	
##################################################################
# Funcao traca_456
#
##################################################################	
traca_456:
	#jal traca_123
	li $s2, 0x2000# 16384 posicao da primeira linha
	li $s3, 64 #16384    largura da primeira linha horizontal
	lw $a2,green #cor da linha
pulo456_a:
	sw $a2, bitmap_address($s2)
	subi $s2, $s2, 4 #muda para a proxima posicao do bitmap
	subi $s3, $s3, 1 #derementa contador de largura
	beq $s3, $zero, fim456_a #verifica fim
	j pulo456_a
fim456_a:	
	jr $ra
		
##################################################################
# Funcao traca_789
#
##################################################################	
traca_789:
	#jal traca_123
	li $s2, 0x3600# 16384 posicao da primeira linha
	li $s3, 64 #16384    largura da primeira linha horizontal
	lw $a2,green #cor da linha
pulo789_a:
	sw $a2, bitmap_address($s2)
	subi $s2, $s2, 4 #muda para a proxima posicao do bitmap
	subi $s3, $s3, 1 #derementa contador de largura
	beq $s3, $zero, fim789_a #verifica fim
	j pulo789_a
fim789_a:	
	jr $ra
		
##################################################################
# Funcao traca_147
#
##################################################################	
traca_147:
	#jal traca_147
#traco da coluna
	li $s2, 40 #posicao da primeira linha vertical
	li $s3, 64 #altura da linha
	lw $a2, green #cor da linha
pulo147_c:
	sw $a2, bitmap_address($s2) #comando que desenha pixel no Bitmap Display
	addi $s2, $s2, 256	#passa para linha debaixo 256 = 64(posicoes) * 4 (bytes por posicao ocupados no BitmapDisplay)
	subi $s3, $s3, 1	#decrementa contador
	beq $s3, $zero, fim147_c   #testa fim
	j pulo147_c
fim147_c:
	jr $ra

##################################################################
# Funcao traca_258
#
##################################################################
traca_258:
	#jal traca_258
#traco da coluna
	li $s2, 124 #posicao da primeira linha vertical
	li $s3, 64 #altura da linha
	lw $a2, green #cor da linha
pulo258_c:
	sw $a2, bitmap_address($s2) #comando que desenha pixel no Bitmap Display
	addi $s2, $s2, 256	#passa para linha debaixo 256 = 64(posicoes) * 4 (bytes por posicao ocupados no BitmapDisplay)
	subi $s3, $s3, 1	#decrementa contador
	beq $s3, $zero, fim258_c   #testa fim
	j pulo258_c
fim258_c:
	jr $ra	
	
##################################################################
# Funcao traca_369
#
##################################################################
	
##################################################################
# Funcao traca_753
#
##################################################################
	
##################################################################
# Funcao traca_159
#
##################################################################	
	
####################################################################
}}}
= Autores = 

[ALINE FIGUEIREDO]
----------------

[ CRISTIANO SANTANA CUNHA DE OLIVEIRA]
-----------------

[JESILENE GODOY]

[Idosa_Aut_LM LUIS MIRANDA]
------------


= Referências = 

<li>http://situado.net/como-jogar-o-jogo-da-velha/
<li>http://www.cppgameprogramming.com/newforums/viewtopic.php?f=7&t=1920
<li>http://ellard.org/dan/www/Courses/cs50-asm.pdf
<li>http://www.tik.ee.ethz.ch/education/lectures/TI1/materials/assemblylanguageprogdoc.pdf
<li>http://courses.missouristate.edu/kenvollmar/mars/
<li>https://aur.archlinux.org/packages/mars-mips/?setlang=pt_BR
<li>http://cs.slu.edu/~fritts/csci140/schedule/MARS%20Tutorial.pdf